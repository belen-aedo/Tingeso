@echo off
setlocal enabledelayedexpansion

REM Script de verificaci√≥n completa de SonarQube
REM Verifica que todo funcione correctamente antes del an√°lisis

echo üèÅ ============================================
echo    VERIFICACION COMPLETA DE SONARQUBE
echo    Karting Frontend - Sistema Arriendo
echo üèÅ ============================================
echo.

set "ERRORS=0"
set "WARNINGS=0"

REM ========================================
REM VERIFICACION 1: SONARQUBE SERVER
REM ========================================
echo üîç [1/10] Verificando SonarQube Server...

REM Verificar si el puerto 9000 est√° en uso
netstat -an | find "9000" > nul
if errorlevel 1 (
    echo ‚ùå Error: Puerto 9000 no est√° en uso
    echo    SonarQube no est√° ejecut√°ndose
    set /a ERRORS+=1
    goto :show_sonar_help
) else (
    echo ‚úÖ Puerto 9000 est√° en uso
)

REM Verificar respuesta HTTP
curl -s -o nul -w "%%{http_code}" http://localhost:9000 > temp_response.txt
set /p HTTP_CODE=<temp_response.txt
del temp_response.txt

if "%HTTP_CODE%"=="200" (
    echo ‚úÖ SonarQube responde correctamente (HTTP 200)
) else (
    echo ‚ùå Error: SonarQube responde con c√≥digo %HTTP_CODE%
    set /a ERRORS+=1
    goto :show_sonar_help
)

REM Verificar API de sistema
curl -s http://localhost:9000/api/system/status > temp_status.txt
findstr "UP" temp_status.txt > nul
if errorlevel 1 (
    echo ‚ùå Error: SonarQube no est√° completamente inicializado
    type temp_status.txt
    set /a ERRORS+=1
    del temp_status.txt
    goto :show_sonar_help
) else (
    echo ‚úÖ SonarQube est√° completamente inicializado
    del temp_status.txt
)

goto :check_token

:show_sonar_help
echo.
echo üîß COMO INICIAR SONARQUBE:
echo    1. Descargar desde: https://www.sonarqube.org/downloads/
echo    2. Extraer en: C:\sonarqube
echo    3. Ejecutar: C:\sonarqube\bin\windows-x86-64\StartSonar.bat
echo    4. Esperar mensaje: "SonarQube is up"
echo    5. Verificar en: http://localhost:9000
echo.
if %ERRORS% GTR 0 goto :final_report

:check_token
REM ========================================
REM VERIFICACION 2: TOKEN DE AUTENTICACION
REM ========================================
echo.
echo üîç [2/10] Verificando token de autenticaci√≥n...

curl -s -H "Authorization: Bearer sqp_cf490bce8d752bcddccd6f3b96ecb867ba3129d6" http://localhost:9000/api/authentication/validate > temp_auth.txt
findstr "valid" temp_auth.txt > nul
if errorlevel 1 (
    echo ‚ùå Error: Token inv√°lido o expirado
    echo    Token: sqp_cf490bce8d752bcddccd6f3b96ecb867ba3129d6
    set /a ERRORS+=1
    del temp_auth.txt
    goto :show_token_help
) else (
    echo ‚úÖ Token v√°lido y autenticado
    del temp_auth.txt
)

goto :check_project

:show_token_help
echo.
echo üîß COMO GENERAR NUEVO TOKEN:
echo    1. Ir a: http://localhost:9000
echo    2. Login: admin/admin
echo    3. Usuario ^> Mi Cuenta ^> Seguridad
echo    4. Generar nuevo token
echo    5. Actualizar sonar-project.properties
echo.
if %ERRORS% GTR 0 goto :final_report

:check_project
REM ========================================
REM VERIFICACION 3: CONFIGURACION DEL PROYECTO
REM ========================================
echo.
echo üîç [3/10] Verificando configuraci√≥n del proyecto...

if not exist "sonar-project.properties" (
    echo ‚ùå Error: sonar-project.properties no existe
    set /a ERRORS+=1
    goto :show_config_help
) else (
    echo ‚úÖ sonar-project.properties existe
)

findstr "kartfront" sonar-project.properties > nul
if errorlevel 1 (
    echo ‚ùå Error: projectKey no est√° configurado correctamente
    set /a ERRORS+=1
) else (
    echo ‚úÖ projectKey configurado: kartfront
)

findstr "sqp_" sonar-project.properties > nul
if errorlevel 1 (
    echo ‚ö†Ô∏è  Advertencia: Token no est√° en el archivo de configuraci√≥n
    set /a WARNINGS+=1
) else (
    echo ‚úÖ Token configurado en el archivo
)

goto :check_nodejs

:show_config_help
echo.
echo üîß ARCHIVO DE CONFIGURACION FALTANTE:
echo    El archivo sonar-project.properties debe existir
echo    Ejecuta el script de configuraci√≥n inicial
echo.
if %ERRORS% GTR 0 goto :final_report

:check_nodejs
REM ========================================
REM VERIFICACION 4: NODE.JS Y NPM
REM ========================================
echo.
echo üîç [4/10] Verificando Node.js y npm...

where node > nul 2>&1
if errorlevel 1 (
    echo ‚ùå Error: Node.js no est√° instalado
    set /a ERRORS+=1
    goto :show_nodejs_help
) else (
    for /f "tokens=*" %%i in ('node --version') do echo ‚úÖ Node.js instalado: %%i
)

where npm > nul 2>&1
if errorlevel 1 (
    echo ‚ùå Error: npm no est√° disponible
    set /a ERRORS+=1
    goto :show_nodejs_help
) else (
    for /f "tokens=*" %%i in ('npm --version') do echo ‚úÖ npm disponible: %%i
)

goto :check_dependencies

:show_nodejs_help
echo.
echo üîß INSTALAR NODE.JS:
echo    1. Descargar desde: https://nodejs.org/
echo    2. Instalar la versi√≥n LTS
echo    3. Reiniciar terminal
echo.
if %ERRORS% GTR 0 goto :final_report

:check_dependencies
REM ========================================
REM VERIFICACION 5: DEPENDENCIAS DEL PROYECTO
REM ========================================
echo.
echo üîç [5/10] Verificando dependencias del proyecto...

if not exist "package.json" (
    echo ‚ùå Error: package.json no existe
    set /a ERRORS+=1
    goto :final_report
) else (
    echo ‚úÖ package.json existe
)

if not exist "node_modules" (
    echo ‚ö†Ô∏è  Advertencia: node_modules no existe
    echo    Instalando dependencias...
    call npm install
    if errorlevel 1 (
        echo ‚ùå Error: No se pudieron instalar las dependencias
        set /a ERRORS+=1
        goto :final_report
    ) else (
        echo ‚úÖ Dependencias instaladas correctamente
    )
) else (
    echo ‚úÖ node_modules existe
)

REM ========================================
REM VERIFICACION 6: SONAR SCANNER
REM ========================================
echo.
echo üîç [6/10] Verificando SonarQube Scanner...

where sonar-scanner > nul 2>&1
if errorlevel 1 (
    echo ‚ùå Error: sonar-scanner no est√° instalado
    echo    Instalando sonar-scanner...
    call npm install -g sonar-scanner
    if errorlevel 1 (
        echo ‚ùå Error: No se pudo instalar sonar-scanner
        set /a ERRORS+=1
        goto :show_scanner_help
    ) else (
        echo ‚úÖ sonar-scanner instalado exitosamente
    )
) else (
    for /f "tokens=*" %%i in ('sonar-scanner -h ^| findstr "INFO"') do echo ‚úÖ SonarQube Scanner disponible
)

goto :check_eslint

:show_scanner_help
echo.
echo üîß INSTALAR SONAR SCANNER:
echo    1. npm install -g sonar-scanner
echo    2. O descargar desde: https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/
echo    3. Agregar al PATH del sistema
echo.
if %ERRORS% GTR 0 goto :final_report

:check_eslint
REM ========================================
REM VERIFICACION 7: ESLINT
REM ========================================
echo.
echo üîç [7/10] Verificando ESLint...

if not exist "eslint.config.js" (
    echo ‚ö†Ô∏è  Advertencia: eslint.config.js no existe
    set /a WARNINGS+=1
) else (
    echo ‚úÖ eslint.config.js existe
)

call npm list eslint > nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  Advertencia: ESLint no est√° instalado como dependencia
    set /a WARNINGS+=1
) else (
    echo ‚úÖ ESLint instalado como dependencia
)

REM ========================================
REM VERIFICACION 8: ARCHIVOS FUENTE
REM ========================================
echo.
echo üîç [8/10] Verificando archivos fuente...

if not exist "src" (
    echo ‚ùå Error: Carpeta src no existe
    set /a ERRORS+=1
    goto :final_report
) else (
    echo ‚úÖ Carpeta src existe
)

set "COMPONENT_COUNT=0"
for %%f in (src\components\*.jsx) do (
    set /a COMPONENT_COUNT+=1
)
echo ‚úÖ Componentes encontrados: %COMPONENT_COUNT%

set "SERVICE_COUNT=0"
for %%f in (src\services\*.js) do (
    set /a SERVICE_COUNT+=1
)
echo ‚úÖ Servicios encontrados: %SERVICE_COUNT%

REM ========================================
REM VERIFICACION 9: PRUEBA DE ESLINT
REM ========================================
echo.
echo üîç [9/10] Ejecutando prueba de ESLint...

call npm run lint > eslint_test.txt 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  ESLint encontr√≥ problemas:
    type eslint_test.txt | findstr "error\|warning" | head -5
    set /a WARNINGS+=1
) else (
    echo ‚úÖ ESLint ejecutado sin errores cr√≠ticos
)
del eslint_test.txt

REM ========================================
REM VERIFICACION 10: PRUEBA DE CONEXION COMPLETA
REM ========================================
echo.
echo üîç [10/10] Prueba de conexi√≥n completa...

echo    Verificando proyecto existente en SonarQube...
curl -s -H "Authorization: Bearer sqp_cf490bce8d752bcddccd6f3b96ecb867ba3129d6" "http://localhost:9000/api/projects/search?q=kartfront" > temp_project.txt
findstr "kartfront" temp_project.txt > nul
if errorlevel 1 (
    echo ‚ö†Ô∏è  Proyecto kartfront no existe a√∫n en SonarQube
    echo    Se crear√° autom√°ticamente en el primer an√°lisis
    set /a WARNINGS+=1
) else (
    echo ‚úÖ Proyecto kartfront existe en SonarQube
)
del temp_project.txt

REM ========================================
REM REPORTE FINAL
REM ========================================
:final_report
echo.
echo üèÅ ============================================
echo    REPORTE FINAL DE VERIFICACION
echo üèÅ ============================================
echo.

if %ERRORS% EQU 0 (
    echo ‚úÖ ESTADO: LISTO PARA ANALISIS
    echo    Errores cr√≠ticos: %ERRORS%
    echo    Advertencias: %WARNINGS%
    echo.
    echo üöÄ EJECUTAR ANALISIS AHORA:
    echo    .\run-sonar-complete.bat
    echo.
    echo üìä RESULTADOS EN:
    echo    http://localhost:9000/dashboard?id=kartfront
    echo.
    echo ¬øQuieres ejecutar el an√°lisis ahora? (s/n)
    set /p run_analysis=
    if /i "%run_analysis%"=="s" (
        echo.
        echo üöÄ Iniciando an√°lisis...
        call .\run-sonar-complete.bat
    )
) else (
    echo ‚ùå ESTADO: ERRORES ENCONTRADOS
    echo    Errores cr√≠ticos: %ERRORS%
    echo    Advertencias: %WARNINGS%
    echo.
    echo üîß CORREGIR ERRORES ANTES DE CONTINUAR
    echo.
)

echo.
echo üìã RESUMEN DE VERIFICACIONES:
echo    [1] SonarQube Server: %HTTP_CODE%
echo    [2] Token de autenticaci√≥n: Verificado
echo    [3] Configuraci√≥n del proyecto: Verificada
echo    [4] Node.js y npm: Verificados
echo    [5] Dependencias: Verificadas
echo    [6] SonarQube Scanner: Verificado
echo    [7] ESLint: Verificado
echo    [8] Archivos fuente: %COMPONENT_COUNT% componentes, %SERVICE_COUNT% servicios
echo    [9] Prueba ESLint: Ejecutada
echo    [10] Conexi√≥n completa: Verificada
echo.

pause
